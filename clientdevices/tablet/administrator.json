{"device":"TABLET","widgets":{"Scripting#1":{"t":"Scripting","lX":975,"lY":30,"sX":1,"sY":1,"s":"New Screen 0","ps":{"enabled":"false","scalingType":"OK","width":"9.08%","height":"8.32%","x":"88.47%","y":"2.66%"},"ver":"200124c210519","dis":false,"tt":"","a":{"code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nvar devices;\nvar activeData;\nScript.on('load', function() {\n\tactiveData = {};\n\tdevices = {};\n\t devices[\"123\"] = {\n\t\t\"Id\": 123,\n\t\t\"Sid\": 123,\n\t\t\"RedAlertEnabled\": 1,\n\t\t\"AmberAlertEnabled\": 1,\n\n\n\t};\n\tactiveData[\"123\"] = {};\n\tactiveData[\"123\"].RedCanSend = 1;\n\tactiveData[\"123\"].AmberCanSend = 1;\n\t//activeData[selected[1]].data = [];\n\tactiveData[\"123\"].dataRed = [];\n\tactiveData[\"123\"].dataAmber = [];\n\tUnitTests();\n});\n\nfunction UnitTests()\n{\n\t//var alertType = \"RedAlertExpired\";\n\tvar alertType = \"AmberAlertExpired\";\n\tvar result = [];\n    for(var currentDevice in devices)\n\t{\n\t\tvar selected = devices[currentDevice];\n\t\t\n\t\t activeData[\"123\"].dataRed = [4,4,4,3,3,3,3,3,4,4,4];\n\t\t activeData[\"123\"].dataAmber = [3,3,3,4,4,2,4,4,4,3,3];\n\n\t    if(activeData[parseInt(selected.Sid)].dataRed.length > 0 || activeData[parseInt(selected.Sid)].dataAmber.length > 0)\n        {        \n            var validateAlert;\n            var validateReset ;\n            if(alertType === \"RedAlertExpired\")\n            {\n                validateAlert = ValidateAlert(activeData[parseInt(selected.Sid)].dataRed, alertType);\n                validateReset = ValidateAlertReset(activeData[parseInt(selected.Sid)].dataRed);\n            }\n            else\n            {\n                validateAlert = ValidateAlert(activeData[parseInt(selected.Sid)].dataAmber, alertType);\n                validateReset = ValidateAlertReset(activeData[parseInt(selected.Sid)].dataAmber);\n            }\n\t\n        \n            if(validateAlert.alertReult)\n\t\t\t{\n\t\t\t\t \n\t\t\t\tif(alertType === \"RedAlertExpired\" && activeData[parseInt(selected.Sid)].RedCanSend === 1 && validateAlert.AlertType === 3)\n\t\t\t\t{\n                    activeData[parseInt(selected.Sid)].RedCanSend = 0;\n\t\t\t\t//\tresult.push(SendNotification(activeData[parseInt(selected.Sid)], 1));\n\t\t\t\t\tactiveData[parseInt(selected.Sid)].dataRed = [];\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(alertType === \"AmberAlertExpired\" && activeData[parseInt(selected.Sid)].AmberCanSend === 1 && validateAlert.AlertType === 4)\n\t\t\t\t{\n                    activeData[parseInt(selected.Sid)].AmberCanSend = 0;\n \n\t\t\t\t//\tresult.push(SendNotification(activeData[parseInt(selected.Sid)], 2));\n\t\t\t\t\tactiveData[parseInt(selected.Sid)].dataAmber = [];\n\n\t\t\t\t}\n\t\t\t}\n            else{\n                if(alertType === \"RedAlertExpired\" && activeData[parseInt(selected.Sid)].RedCanSend === 1 && validateAlert.AlertType === 3)\n\t\t\t\t{\n                    \n\t\t\t\t\tactiveData[parseInt(selected.Sid)].dataRed = [];\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(alertType === \"AmberAlertExpired\" && activeData[parseInt(selected.Sid)].AmberCanSend === 1 && validateAlert.AlertType === 4)\n\t\t\t\t{\n \t\t\t\t\tactiveData[parseInt(selected.Sid)].dataAmber = [];\n\n\t\t\t\t}\n            }\n\t\t\t\n\t\t\tif(validateReset)\n\t\t\t{\n\t\t\t\tconsole.log(\"Resetting thresholds senders\");\n \t\t\t\tactiveData[parseInt(selected.Sid)].RedCanSend = 1;\n\t\t\t\tactiveData[parseInt(selected.Sid)].AmberCanSend = 1;\n                activeData[parseInt(selected.Sid)].dataRed = [];\n                activeData[parseInt(selected.Sid)].dataAmber = [];\n\t\t\t}\n\n        }\n\t}\n    return result;\n}\n\n\nfunction ValidateAlert(data, alertType)\n{\n\tvar result ={};\n    var sendSignal = true;\n\tvar alert;\n\tswitch(alertType)\n\t{\n\t\tcase \"RedAlertExpired\":\n\t\t\talert = 3;\n\t\t\tbreak;\n\t\tcase \"AmberAlertExpired\":\n\t\t\talert = 4;\n\t\t\tbreak;\n\t}\n\t\n\tfor(var item in data)\n\t{\n\t//\tconsole.log(data[item]);\n\t\tif(data[item] === 2 )\n\t\t{\n\t\t   sendSignal = false;\n\t\t}\n\t}\n\tresult.AlertType = alert;\n    result.alertReult = sendSignal;\n\treturn result;\n}\n\n\n\nfunction ValidateAlertReset(data)\n{\n\tvar result = false;\n\tfor(var item in data)\n\t{\n\t//\tconsole.log(data[item]);\n\t\tif(data[item] === 2)\n\t\t{\n\t\t   result = true;\n\t\t}\n\t}\n\n\treturn result;\n}","script type":"javascript"},"ev":{}},"Graph#0":{"t":"Graph","lX":55,"lY":215,"sX":4.95,"sY":2.95,"s":"New Screen 0","ps":{"enabled":"false","scalingType":"OK","width":"89.92%","height":"48.68%","x":"5%","y":"17.89%"},"ver":"190104c210519","dis":false,"tt":"","a":{"line type":"linear","history timespan":"500","enable zoom":"true"},"ev":{"serverEvents":{"inputEvents":{"New Event #2":{"channel":"PESTCO/RODENTS/999011/WEIGHT","event":"history","important":"false","attribs":{"color":"red","area fill":"false","fill opacity":"0.2"}},"New Event #3":{"channel":"PESTCO/RODENTS/999011/MOTIONRIGHT","event":"history","important":"false","attribs":{"color":"blue","area fill":"false","fill opacity":"0.2"}},"New Event #4":{"channel":"PESTCO/RODENTS/999011/PACKETTYPE","event":"history","important":"false","attribs":{"color":"yellow","area fill":"false","fill opacity":"0.2"}},"New Event #1":{"channel":"PESTCO/RODENTS/999011/MOTIONLEFT","event":"history","important":"false","attribs":{"color":"green","area fill":"false","fill opacity":"0.2"}}}}}},"testBranchesTable":{"t":"Table","lX":35,"lY":40,"sX":7.25,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"48.24%","height":"54.95%","x":"1.55%","y":"3.3%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,name,status,address,country,longitude,latitude","display header":"true","title":"Branches","enable search":"true","colWidths":"0.1037344398340249,0.14107883817427386,0.1396957123098202,0.18810511756569848,0.14246196403872752,0.14246196403872752,0.14246196403872752"},"ev":{}},"testCustomersTable":{"t":"Table","lX":35,"lY":505,"sX":24.5,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"163.01%","height":"54.95%","x":"2.33%","y":"57.65%"},"ver":"190104c210519","dis":false,"tt":"","a":{"columns":"id,name,address,classification,relativeid,status,primarycontactname,primarycontactemail,primarycontactmobile,country,addressline1,addressline2,state,zip,city,county,longitude,latitude","text color":"#000000","row color":"#000000","display header":"true","title":"Customers","enable search":"true","colWidths":"0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555,0.05555555555555555"},"ev":{}},"Scripting#0":{"t":"Scripting","lX":2060,"lY":60,"sX":1,"sY":1,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description:\n * Create Author/Date:\n * Modified Author/Date Date:\n * Version:\n */\n\nconst testCustomersTable = Script.getWidget(\"testCustomersTable\");\nconst testBranchesTable = Script.getWidget(\"testBranchesTable\");\nconst testSitesTable = Script.getWidget(\"testSitesTable\");\nconst testLocationsTable = Script.getWidget(\"testLocationsTable\");\nconst testPlatformTable = Script.getWidget(\"testPlatformTable\");\nconst testModelTable = Script.getWidget(\"testModelTable\");\nconst Advisories = Script.getWidget(\"Advisories\");\nconst Devices = Script.getWidget(\"Devices\");\nconst ErrorTransactions = Script.getWidget(\"ErrorTransactions\");\nconst SiteReports = Script.getWidget(\"siteReports\");\nconst DeviceWeightTable = Script.getWidget(\"DeviceWeightTable\");\nconst qalogsTable = Script.getWidget(\"qaLogsTable\");\nconst companyTable = Script.getWidget(\"companyTable\");\nClientEvents.subscribe(\"resetErrorTransactions\", function (eventData) {\n  // set all the error transactions to active\n  Database.readRecords(\"rodent\", \"ErrorTransactions\", function (eventData) {\n    let data = SensaCollection.load(eventData.value);\n    data.forEach((record, pk) => {\n      record[\"IsActive\"] = 1;\n      let dbVal = {};\n      dbVal[pk] = record;\n      Database.saveRecordParam(\"rodent\", \"ErrorTransactions\", dbVal);\n    });\n  });\n  // go through all the devices, check if the error code flag has been set, then check if any error transactions exist. If they don't then need to update\n  // the error code flag to 0\n  Database.readRecords(\"rodent\", \"Devices\", function (eventData) {\n    console.log(\"Reading devices\");\n    var data = SensaCollection.load(eventData.value);\n    data.forEach((record1, pk1) => {\n      console.log(\"Checking device: \" + pk1);\n\n      // check each device, if the error code flag is set then check if there are actually any error transactions\n      // if (record1['ErrorCodeFlag'] == 1) {\n      //console.log(\"Error code flag was set for device: \" + pk1);\n\n      // check error transaction database\n      Database.readRecords(\n        \"rodent\",\n        \"ErrorTransactions\",\n        function (readData) {\n          console.log(\"Reading error transactions\");\n          readData = SensaCollection.load(readData.value);\n          var transactionCounter = 0;\n          readData.forEach((record2, pk2) => {\n            transactionCounter++;\n          });\n          if (transactionCounter == 0) {\n            // if there are no transactions, need to set the error code flag to 0\n            console.log(\"No error transactions for device: \" + pk1);\n            record1[\"ErrorCodeFlag\"] = 0;\n            var tempRecord = { Id: pk1, ErrorCodeFlag: 0 };\n            var dbVal = {};\n            dbVal[pk1] = tempRecord;\n            Database.saveRecordParam(\"rodent\", \"Devices\", dbVal);\n            console.log(\"Error code flag cleared for device: \" + pk1);\n          } else {\n            console.log(\"Found error transactions for device: \" + pk1);\n            record1[\"ErrorCodeFlag\"] = 1;\n            var tempRecord = { Id: pk1, ErrorCodeFlag: 0 };\n            var dbVal = {};\n            dbVal[pk1] = tempRecord;\n            Database.saveRecordParam(\"rodent\", \"Devices\", dbVal);\n            console.log(\"Error code flag set for device: \" + pk1);\n          }\n        },\n        { columns: \"Id,DeviceId\", filter: \"DeviceId = \" + pk1 }\n      );\n      //}\n    });\n  });\n});\n\n/**\n * Initialise script state (run once at startup)\n */\nScript.on(\"load\", function () {\n  Database.readRecords(\"rodent\", \"Customers\", function (eventData) {\n    testCustomersTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n  Database.readRecords(\"rodent\", \"Branches\", function (eventData) {\n    testBranchesTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n  Database.readRecords(\"rodent\", \"Sites\", function (eventData) {\n    testSitesTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n  Database.readRecords(\"rodent\", \"Locations\", function (eventData) {\n    testLocationsTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n  Database.readRecords(\"rodent\", \"SiteEvents\", function (eventData) {\n    Advisories.receiveValue(SensaCollection.load(eventData.value));\n  });\n\n  Database.readRecords(\"rodent\", \"UserRoles\", function (eventData) {\n    testPlatformTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n\n  Database.readRecords(\"rodent\", \"Model\", function (eventData) {\n    testModelTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n  Database.readRecords(\"rodent\", \"Reports\", function (eventData) {\n    SiteReports.receiveValue(SensaCollection.load(eventData.value));\n  });\n\t\n\t//companyTable\n\tDatabase.readRecords(\"rodent\", \"Companies\", function (eventData) {\n    companyTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n  Database.readRecords(\"rodent\", \"Devices\", function (eventData) {\n    var deviceDataCollection = SensaCollection.load(eventData.value);\n\n    DeviceWeightTable.receiveValue(deviceDataCollection);\n    //lastp1weight,lastrebaitrange,\n    //deviceDataCollection.renameColumn(\"lastp1weight\", \"Last P1 Weight\");\n    //deviceDataCollection.renameColumn(\"lastrebaitrange\", \"Last Rebait Range\");\n    var headers = deviceDataCollection.headers;\n    var pk = deviceDataCollection.pk;\n    var data = deviceDataCollection.data;\n\n    //console.log(\"Columns are \" + headers);\n    //console.log(\"pk is \" + pk);\n    //console.log(\"Data is \" + data);\n\n    Database.readRecords(\"rodent\", \"DeviceSettings\", function (eventData) {\n      var settingsCollection = SensaCollection.load(eventData.value);\n      //Devices.receiveValue(deviceDataCollection);\n      headers.push(\"DeviceSettings\");\n      //headers.push(\"Value\");\n      var settings = settingsCollection.data;\n\n      for (const dataKey in data) {\n        if (dataKey in settings) {\n          //data[dataKey].push(settings[dataKey][1]);\n          data[dataKey].push(settings[dataKey][2]);\n        } else {\n          data[dataKey].push(\"\");\n          //data[dataKey].push(\"\");\n        }\n      }\n      //return new SensaCollection(sensacollection.headers, sensacollection.pk, {data:sensacollection.data});\n      var newDevCollection = new SensaCollection(headers, pk, { data: data });\n      //console.log(\"Data is marged : \" + JSON.stringify(newDevCollection, null, 4));\n      Devices.receiveValue(newDevCollection);\n    });\n    //Devices.receiveValue(deviceDataCollection);\n    //console.log(\"Data is : \" + JSON.stringify(deviceDataCollection, null, 4));\n    //Devices.receiveValue(deviceDataCollection);\n  });\n\n  Database.readRecords(\"rodent\", \"ErrorTransactions\", function (eventData) {\n    ErrorTransactions.receiveValue(SensaCollection.load(eventData.value));\n  });\n  \n  Database.readRecords(\"rodent\", \"QaLogs\", function (eventData) {\n    qalogsTable.receiveValue(SensaCollection.load(eventData.value));\n  });\n\n  ClientEvents.subscribe(\"clearErrorCodeFlag\", clearErrorCodeFlagsPressed);\n});\n\nfunction clearErrorCodeFlagsPressed() {\n  // get the selected device id's from the table\n  var deviceTableForm = Script.getFormByKey(\"devices\");\n  var selectedRowsCollection = deviceTableForm.selectedRows;\n  var selectedRowsData = selectedRowsCollection.data;\n\n  // for each device, set the error code flag to zero and update the database\n  var dbVal = {};\n  var deviceIds = Object.keys(selectedRowsData);\n  for (var i = 0; i < deviceIds.length; i++) {\n    var deviceId = deviceIds[i];\n    // create the record to save\n    var tempRecord = {\n      Id: deviceId,\n      ErrorCodeFlag: 0,\n    };\n    dbVal[deviceId] = tempRecord;\n    Database.saveRecord(\"rodent\", \"Devices\", dbVal, function (eventData) {\n      console.log(\"Device id \" + deviceId + \" updated\");\n    });\n  }\n  Devices.deleteAllRows();\n  Database.readRecords(\"rodent\", \"Devices\", function (eventData) {\n    Devices.receiveValue(SensaCollection.load(eventData.value));\n  });\n}"},"ev":{}},"testSitesTable":{"t":"Table","lX":790,"lY":35,"sX":20.51,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"136.46%","height":"54.95%","x":"55.22%","y":"4.88%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,name,relativeid,status,primarycontactname,primarycontactemail,primarycontactmobile,country,state,city,zip,addressline1,longitude,latitude","display header":"true","title":"Sites","enable search":"true","colWidths":"0.04538799414348463,0.06832601268911664,0.06442166910688141,0.04685212298682284,0.09126403123474866,0.08003904343582235,0.10346510492923378,0.07174231332357248,0.08345534407027819,0.05905319668130796,0.04880429477794046,0.09419228892142509,0.07125427037579307,0.07174231332357248"},"ev":{}},"testLocationsTable":{"t":"Table","lX":2655,"lY":515,"sX":6.45,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"27.07%","height":"51.49%","x":"29.21%","y":"41.75%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,name,relativeid,status","display header":"true","title":"Locations","colWidths":"0.25038880248833595,0.25038880248833595,0.24883359253499224,0.25038880248833595","enable search":"true"},"ev":{}},"Advisories":{"t":"Table","lX":35,"lY":975,"sX":19.39,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"140%","height":"51.49%","x":"2.33%","y":"111.3%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,title,siteeventpriority,siteeventtype,siteid,trapid,reportid,reason,location,assigned,context,comment,locationid,customerid,companyid,siteeventstatus,images,siteeventdate,branchid,createdon,createdby,updatedby,updatedon,status","display header":"true","title":"Advisories","enable search":"true","colWidths":"0.023748064016520392,0.04078471863706763,0.06608156943727414,0.05678884873515746,0.030975735673722252,0.03200826019617966,0.041300980898296334,0.041300980898296334,0.041817243159525036,0.041817243159525036,0.041817243159525036,0.041300980898296334,0.041817243159525036,0.041300980898296334,0.042333505420753745,0.041300980898296334,0.041817243159525036,0.041300980898296334,0.041817243159525036,0.041817243159525036,0.041300980898296334,0.041817243159525036,0.041817243159525036,0.041817243159525036"},"ev":{}},"testPlatformTable":{"t":"Table","lX":3330,"lY":510,"sX":6.45,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"42.91%","height":"51.37%","x":"110.25%","y":"58.56%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,user,isadmin","display header":"true","title":"UserRoles","colWidths":"0.3328149300155521,0.3343701399688958,0.3328149300155521","enable search":"true"},"ev":{}},"Devices":{"t":"Table","lX":30,"lY":1435,"sX":17.35,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"115.44%","height":"51.49%","x":"2%","y":"163.81%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,owner,modelid,devicenumber,locationid,siteid,updatedon,status,state,devicetype,stationid,modelid,lastp1weight,lastrebaitrange,errorcodeflag,communicationerror,devicesettings,devicebattery,p2tilt,isqaenabled,companyproductid","display header":"true","title":"Devices","enable search":"true","selectable":"multi","form id":"devices","form key":"selectedRows","colWidths":""},"ev":{}},"testModelTable":{"t":"Table","lX":4020,"lY":435,"sX":6.15,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"40.92%","height":"54.95%","x":"267.33%","y":"53.36%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,name,modeltype,batteryupper,batterylower","display header":"true","title":"Model","colWidths":"0.200652528548124,0.19902120717781402,0.200652528548124,0.19902120717781402,0.200652528548124","enable search":"true"},"ev":{}},"ErrorTransactions":{"t":"Table","lX":30,"lY":1895,"sX":17.58,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"100%","height":"51.37%","x":"2.72%","y":"157.65%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,deviceid,issueid,isactive,transactionvalue","display header":"true","title":"ErrorTransactions","colWidths":"0.2002301495972382,0.1996547756041427,0.2002301495972382,0.1996547756041427,0.2002301495972382","enable search":"true"},"ev":{}},"Button#0":{"t":"Button","lX":205,"lY":1905,"sX":2.05,"sY":1,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"18.62%","height":"5.26%","x":"24.7%","y":"158.6%"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Reset Transactions"},"ev":{"clientEvents":{"outputEvents":{"New Event #1":{"channel":"resetErrorTransactions/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"siteReports":{"t":"Table","lX":3495,"lY":975,"sX":10.9,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"62.54%","height":"51.49%","x":"2.12%","y":"111.44%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,siteid,title,technicianid,summary","display header":"true","title":"Site Reports","enable search":"true","colWidths":"0.20036764705882354,0.19944852941176472,0.20036764705882354,0.19944852941176472,0.20036764705882354"},"ev":{}},"Button#3":{"t":"Button","lX":110,"lY":1430,"sX":2.05,"sY":1,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"18.62%","height":"5.26%","x":"24.7%","y":"158.6%"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Clear Error Code Flag"},"ev":{"clientEvents":{"outputEvents":{"clearErrorCodeFlag":{"channel":"clearErrorCodeFlag/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"DeviceWeightTable":{"t":"Table","lX":30,"lY":2366,"sX":11.52,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"66.09%","height":"58.37%","x":"1.84%","y":"307%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,devicenumber,rebaitrangewithtilt,rebaitrange,takengoriginal,p1tilt,p2tilt","display header":"true","title":"Devices","enable search":"true","selectable":"multi","colWidths":"0.1371527777777778,0.1371527777777778,0.13541666666666666,0.1371527777777778,0.1371527777777778,0.13541666666666666,0.1371527777777778"},"ev":{}},"TimeWindow":{"t":"Table","lX":30,"lY":50,"sX":16.4,"sY":4.5,"s":"Test Script","ps":{"enabled":"false","scalingType":"OK","width":"94.09%","height":"51.49%","x":"1.72%","y":"5.72%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#e5dcdc","columns":"deviceid,companyid,branchid,customerid,siteid,locationid,startdate,enddate,,systemcreated,status","display header":"true","enable search":"true","colWidths":"0.06108735491753207,0.07147220525351253,0.06414172266340867,0.08430054978619425,0.05864386072083079,0.11362248014660965,0.1563836285888821,0.144777031154551,0.06353084911423336,0.09102015882712279,0.09102015882712279"},"ev":{}},"Scripting#2":{"t":"Scripting","lX":935,"lY":710,"sX":1,"sY":1,"s":"Test Script","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n\nconst TimeWindow = Script.getWidget(\"TimeWindow\");\nconst DeviceNumberTable = Script.getWidget(\"DeviceNumberTable\");\n\t\nScript.on('load', function() {\n\tDatabase.readRecords(\"rodent\", \"TimeWindow\", function (eventData) {\n\t\tvar timeWindowCollection = SensaCollection.load(eventData.value);\n\t\tvar startDateIndex = timeWindowCollection.headers.indexOf(\"StartDate\");\n\t\tvar endDateIndex = timeWindowCollection.headers.indexOf(\"EndDate\");\n\t\tconsole.log(startDateIndex);\n\t\tconsole.log(endDateIndex);\n\t\tconsole.log(JSON.stringify(timeWindowCollection,null,4));\n\t\ttimeWindowCollection.forEach( function(row, key) {\n\t\t\tconsole.log(row);\n\t\t\tvar startDateUNIX = parseInt(row.StartDate);\n\t\t\tvar endDateUNIX = parseInt(row.EndDate);\n\t\t\tconsole.log(startDateUNIX);\n\t\t\tconsole.log(endDateUNIX);\n\t\t\tvar startObj = new Date(startDateUNIX);\n\t\t\tvar endObj = new Date(endDateUNIX);\n\t\t\ttimeWindowCollection.data[key][startDateIndex] = startObj.toLocaleString();\n\t\t\ttimeWindowCollection.data[key][endDateIndex] = endObj.toLocaleString();\n\t\t});\n\t\tTimeWindow.receiveValue(SensaCollection.load(eventData.value));\n\t});\n\tDatabase.readRecords(\"rodent\", \"Devices\", function (eventData) {\n\t\tDeviceNumberTable.receiveValue(SensaCollection.load(eventData.value));\n\t});\n});"},"ev":{}},"DeviceNumberTable":{"t":"Table","lX":30,"lY":535,"sX":3.43,"sY":4.5,"s":"Test Script","ps":{"enabled":"false","scalingType":"OK","width":"19.68%","height":"51.49%","x":"1.72%","y":"61.1%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#e5dcdc","columns":"id,devicenumber","display header":"true","enable search":"true","colWidths":""},"ev":{}},"Scripting#3":{"t":"Scripting","lX":70,"lY":120,"sX":1,"sY":1,"s":"Provisioning Test","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\n\nvar accountId;\nvar userId;\nvar companyId;\nvar failure = false;\nvar currentUser;\nvar timeUNIX;\nvar timeString;\n\n\n// Just fill out your info in the following object formData\n\nvar formData = {\n\t// New Account Info\n\t\"AccountInfo\": {\n\t\t\"Account Name\": \"Top Hat Comics 004\",\n\t\t\"Street\": \"Detroit street\",\n\t\t\"City\": \"Detroit city\",\n\t\t\"State\": \"Detroit state\",\n\t\t\"Post Code\": \"4118\",\n\t\t\"Website\": \"www.github.com\",\n\t\t\"Account Notes\": \"this account is a prototype test account.\",\n\t\t\"Enabled\": true,\n\t\t// New Account Info -> Contact Information\n\t\t\"Contact Name\": \"Sebastian Young\",\n\t\t\"Mobile\": \"041040104\",\n\t\t\"Email\": \"sebastian004@buildvation.com\",\n\t\t\"Contact Notes\": \"Don't ever contact me ever about anything.\",\n\t},\n\t\n\t// New User Info\n\t// account name\n\t\"UserInfo\": {\n\t\t\"User Dashboard\": \"administrator\",\n\t\t\"Email Username\": \"sebastian004@buildvation.com\",\n\t\t\"First Name\": \"Sebby\",\n\t\t\"Last Name\": \"Young\",\n\t\t//\"Email Address\": not gonna bother with putting this in twice\n\t\t\"Mobile\": \"0401010240\",\n\t\t\"Password\": \"pass\",\n\t\t\"Confirm Password\": \"pass\",\n\t\t\"Permissions\": \"oo idk maybe all\",\n\t},\n};\n\nfunction testProvisionAccount() {\n\t// create account\n\tvar accountObj = {\n\t\t\"accountname\": formData[\"AccountInfo\"][\"Account Name\"],\n\t\t\"address\":     formData[\"AccountInfo\"][\"Street\"],\n\t\t\"city\":        formData[\"AccountInfo\"][\"City\"],\n\t\t\"state\":       formData[\"AccountInfo\"][\"State\"],\n\t\t\"pcode\":       formData[\"AccountInfo\"][\"Post Code\"],\n\t\t\"website\":     formData[\"AccountInfo\"][\"Website\"],\n\t\t\"notes\":       formData[\"AccountInfo\"][\"Account Notes\"],\n\t\t\"contactName\": formData[\"UserInfo\"][\"First Name\"] + \" \" + formData[\"UserInfo\"][\"Last Name\"],\n\t\t\"mobile\":      formData[\"AccountInfo\"][\"Mobile\"],\n\t\t\"email\":       formData[\"AccountInfo\"][\"Email\"],\n\t\t\"contactnotes\":formData[\"AccountInfo\"][\"Contact Notes\"],\n\t\t\"status\":      \"1\"\n\t};\n\t\n\tDirectory.createAccount(accountObj, async function (eventData) {\n\t\tif (eventData.value == 1) {\n\t\t\tconsole.log(\"SUCCESS\");\n\t\t\tprovisionUserAccount();\n\t\t} else {\n\t\t\tawait Client.alert(\"An error occured creating a new account. Please contact your system administrator.\", \"An Error Occured\");\n\t\t\tfailure = true;\n\t\t}\n\t});\n}\n\nfunction provisionUserAccount() {\n\t// create user for account\n\t// will need to query the db to get the ID of the account we just made\n\tDatabase.readRecords(\"Directory\", \"account\", function (eventData) {\n\t\tvar accountInfo = SensaCollection.load(eventData.value);\n\t\taccountId = accountInfo.getColumn(\"accountid\")[0];\n\t\tconsole.log(\"Account id: \" + accountId);\n\n\t\t// create user object\n\t\tvar userAccountObj = {\n\t\t\t\"accountid\":      accountId,\n\t\t\t\"dashboard\":      \"administrator\",\n\t\t\t\"username\":       formData[\"AccountInfo\"][\"Email\"],\n\t\t\t\"first\":          formData[\"UserInfo\"][\"First Name\"],\n\t\t\t\"last\":           formData[\"UserInfo\"][\"Last Name\"],\n\t\t\t\"email\":          formData[\"AccountInfo\"][\"Email\"],\n\t\t    \"mobile\":         formData[\"AccountInfo\"][\"Mobile\"],\n\t\t\t\"password\":       \"1234\",\n\t\t\t\"confirmPassword\":\"1234\",\n\t\t\t\"tablePerms\":     [\"DASHBOARD\",\"DESIGN\",\"DEVELOPER\",\"FLOWS\",\"SETTINGS\",\"APPSETTINGS\"],\n\t\t};\n\t\t\n\t\tDirectory.addUser(userAccountObj, userAccountObj.accountid, userAccountObj.tablePerms, userAccountObj.dashboard, function (eventData) {\n\t\t\tif (eventData.value.account == false) {\n\t\t\t\talert(\"An error occured trying to make a new user. The username may already exist. Please try again.\");\n\t\t\t\tfailure = true;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tprovisionCompany();\n\t\t\t}\n\t\t});\n\t\t\n\t}, {filter: \"accountname='\" + formData[\"AccountInfo\"][\"Account Name\"] + \"'\"});\n}\n\nfunction provisionCompany() {\n\ttimeUNIX = new Date().getTime(); // use for created on and updated on\n\ttimeString = Utils.formatDate(new Date(), \"dd/MM/yyyy HH:mm\", false); // use for created on and updated on\n\tcurrentUser = formData[\"UserInfo\"][\"Email Username\"]; // use the newly created user for created by, updated by and owner\n\t\n\tvar companyObj = {\n\t\t\"Name\":      formData[\"AccountInfo\"][\"Account Name\"],\n\t\t\"Address\":   formData[\"AccountInfo\"][\"Street\"],\n\t\t\"CreatedOn\": timeString,\n\t\t\"UpdatedOn\": timeString,\n\t\t\"CreatedBy\": currentUser,\n\t\t\"UpdatedBy\": currentUser,\n\t\t\"Owner\":     currentUser,\n\t\t\"Status\":    \"1\"\n\t};\n\t\n\tvar dbVal = {};\n\tdbVal[companyObj.Name] = companyObj;\n\tDatabase.saveRecord(\"rodent\", \"Companies\", dbVal, function(dbResponse) {\n\t\tif (dbResponse.value == 1) {\n\t\t\tconsole.log(\"Create company success\");\n\t\t\tcreateUserRole();\n\t\t} else {\n\t\t\talert(\"Create company failed\");\n\t\t\tfailure = true;\n\t\t}\n\t});\n}\n\nfunction createUserRole() {\n\t// need to create an Admin role, a Technician role, and a Manager role\n\t\n\t// first read the ID of the company we just made\n\tDatabase.readRecords(\"rodent\", \"companies\", function(dbResponse) {\n\t\tvar companyInfo = SensaCollection.load(dbResponse.value);\n\t\tcompanyId = companyInfo.getColumn(\"Id\")[0];\n\t\t\n\t\tvar adminUserRoleObj = {\n\t\t\t\"User\": formData[\"UserInfo\"][\"Email Username\"],\n\t\t\t\"CompanyId\": \"\" + companyId,\n\t\t\t\"CreatedOn\": timeString,\n\t\t\t\"UpdatedOn\": timeString,\n\t\t\t\"CreatedBy\": currentUser,\n\t\t\t\"UpdatedBy\": currentUser,\n\t\t\t\"Owner\":     currentUser,\n\t\t\t\"Status\":    \"1\",\n\t\t\t\"IsAdmin\":   \"1\",\n\t\t\t\"IsPrimary\": \"1\"\t\t\t\n\t\t};\n\t\t\n\t\tvar dbVal = {};\n\t\tdbVal[adminUserRoleObj.User] = adminUserRoleObj;\n\t\t\n\t\tDatabase.saveRecord(\"rodent\", \"UserRoles\", dbVal, function(dbResponse2) {\n\t\t\tif (dbResponse2.value == 1) {\n\t\t\t\tconsole.log(\"Created user role success\");\n\t\t\t\tcreateUserAccessRoles();\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\talert(\"Failed making user role\");\n\t\t\t\tfailure = true;\n\t\t\t}\n\t\t});\n\t\t\n\t}, {filter: \"Name='\" + formData[\"AccountInfo\"][\"Account Name\"] + \"'\"});\n}\n\nfunction createUserAccessRoles() {\n\t// create the 3 default user access roles\n\tvar adminObj = {\n\t\t\"CompanyId\": companyId,\n\t\t\"RoleName\": \"Admin\",\n\t\t\"Feature01\": 1,\n\t\t\"Feature02\": 1,\n\t\t\"Feature03\": 1,\n\t\t\"Feature04\": 1,\n\t\t\"Feature05\": 1,\n\t\t\"Feature06\": 1,\n\t\t\"Status\": 1,\n\t\t\"CreatedOn\": timeString,\n\t\t\"CreatedBy\": currentUser,\n\t\t\"ModifiedOn\": timeString,\n\t\t\"ModifiedBy\": currentUser,\n\t};\n\t\n\tvar technicianObj = {\n\t\t\"CompanyId\": companyId,\n\t\t\"RoleName\": \"Technician\",\n\t\t\"Feature01\": 1,\n\t\t\"Feature02\": 1,\n\t\t\"Feature03\": 1,\n\t\t\"Feature04\": 1,\n\t\t\"Status\": 1,\n\t\t\"CreatedOn\": timeString,\n\t\t\"CreatedBy\": currentUser,\n\t\t\"ModifiedOn\": timeString,\n\t\t\"ModifiedBy\": currentUser,\n\t};\n\t\n\tvar managerObj = {\n\t\t\"CompanyId\": companyId,\n\t\t\"RoleName\": \"Manager\",\n\t\t\"Feature01\": 1,\n\t\t\"Feature04\": 1,\n\t\t\"Status\": 1,\n\t\t\"CreatedOn\": timeString,\n\t\t\"CreatedBy\": currentUser,\n\t\t\"ModifiedOn\": timeString,\n\t\t\"ModifiedBy\": currentUser,\n\t};\n\t\n\tvar dbVal = {};\n\tdbVal[adminObj.CompanyId] = adminObj;\n\tDatabase.saveRecord(\"rodent\", \"UserAccessRole\", dbVal, function(dbResponse) {\n\t\tif (dbResponse.value == 1) {\n\t\t\tconsole.log(\"Success saving first user role\");\n\t\t\tassignUserAccessRole();\n\t\t} else {\n\t\t\tconsole.log(\"Failure saving first user role\");\n\t\t\tfailure = true;\n\t\t}\n\t});\n\t\n\tdbVal[technicianObj.CompanyId] = technicianObj;\n\tDatabase.saveRecord(\"rodent\", \"UserAccessRole\", dbVal, function(dbResponse) {\n\t\tif (dbResponse.value == 1) {\n\t\t\tconsole.log(\"Success saving second user role\");\n\t\t} else {\n\t\t\tconsole.log(\"Failure saving second user role\");\n\t\t\tfailure = true;\n\t\t}\n\t});\n\t\n\tdbVal[managerObj.CompanyId] = managerObj;\n\tDatabase.saveRecord(\"rodent\", \"UserAccessRole\", dbVal, function(dbResponse) {\n\t\tif (dbResponse.value == 1) {\n\t\t\tconsole.log(\"Success saving third user role\");\n\t\t} else {\n\t\t\tconsole.log(\"Failure saving third user role\");\n\t\t\tfailure = true;\n\t\t}\n\t});\n}\n\nfunction assignUserAccessRole() {\n\t// assign the ADMIN user access role to the newly added user account\n\t// first get the ID of the admin user role that we have created\n\tDatabase.readRecords(\"rodent\", \"UserAccessRole\", function (dbResponse) {\n\t\tvar userAccessRoleInfo = SensaCollection.load(dbResponse.value);\n\t\tvar userAccessRoleId = userAccessRoleInfo.getColumn(\"Id\")[0];\n\t\tconsole.log(\"User access role id: \" + userAccessRoleId);\n\t\t\n\t\tvar userObj = {\n\t\t\t\"username\": currentUser,\n\t\t\t\"accessrole\": userAccessRoleId\n\t\t};\n\t\tvar dbVal = {};\n\t\tdbVal[userObj.username] = userObj;\n\t\tDatabase.updateRecord(\"directory\", \"users\", dbVal, function(dbResponse2) {\n\t\t\tif (dbResponse2.value == 1) {\n\t\t\t\tconsole.log(\"Successfully assigned user access role\");\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Unable to set user's access role\");\n\t\t\t\tfailure = 1;\n\t\t\t}\n\t\t});\n\t}, {filter: \"CompanyId=\" + companyId + \" AND RoleName='Admin'\"});\n}\n\t\n\t\nScript.on('load', function() {\t\n\tClientEvents.subscribe(\"provision\", testProvisionAccount);\t\n\t//ClientEvents.subscribe(\"deleteAccount\", deleteAccount);\n});"},"ev":{}},"Button#1":{"t":"Button","lX":30,"lY":35,"sX":2.05,"sY":1,"s":"Provisioning Test","ps":{"enabled":"false","scalingType":"OK","width":"11.76%","height":"5.26%","x":"6.77%","y":"36.04%"},"ver":"190104c210519","dis":false,"tt":"","a":{"button name":"Provision Company"},"ev":{"clientEvents":{"outputEvents":{"provision":{"channel":"provision/receive value","event":"pressed","trigger":"pressed","important":"false"}}}}},"Button#2":{"t":"Button","lX":100,"lY":100,"sX":2,"sY":2.17,"s":"Restart Server","ps":{"enabled":"true","scalingType":"OK","width":"200px","height":"100px","x":"100px","y":"100px"},"ver":"190104c210519","dis":false,"tt":"","a":{"outline color":"black","value on":"restart","text color":"black","3D shadow":"true","button name":"Restart Server"},"ev":{"clientEvents":{"outputEvents":{"restart":{"channel":"restart/receive value","event":"pressed","trigger":"pressed","important":"false"}}},"serverEvents":{"outputEvents":{}}}},"Scripting#4":{"t":"Scripting","lX":415,"lY":165,"sX":1,"sY":1,"s":"Restart Server","ps":{"enabled":"false","scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"200124c210519","dis":false,"tt":"","a":{"script type":"javascript","code editor":"//# sourceURL=dynamic-script.js\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n/**\n * Initialise script state (run once at startup)\n */\nScript.on('load', function() {\n\n});\n\nClientEvents.subscribe(\"restart\", function(eventData) {\n\tif (confirm(\"WARNING - Please confirm you want to restart the server. This will logout all users and reset the server.\")) {\n\t\tconsole.log(\"Resetting server, refresh the browser in 20 seconds to reconnect...\");\n\t    var channel = {\"category\":\"$sys\", \"className\": \"inimgmt\", \"instance\": \"request\", \"scope\": \"data\", \"value\": \"restart\", \"usrmeta\": \"restart\", \"label\": \"string\"};\n\t    Script.publishToChannel(channel);\n  } else {\n\t\tconsole.log(\"Server reset cancelled.\");\n  }\n});"},"ev":{}},"qaLogsTable":{"t":"Table","lX":36,"lY":2860,"sX":20,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"83.89%","height":"42.45%","x":"1.84%","y":"270.82%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,deviceid,turnonledcheck,regioncheck,batterycheck,tiltcheck,buttonpressled,loadcellcheck,lefircheck,rightircheck,weightdropcheck,turnoffledcheck,turnoffp8check,overallresult","display header":"true","title":"Qa Logs","enable search":"true","selectable":"multi","colWidths":"0.07014028056112225,0.06913827655310621,0.07014028056112225,0.06913827655310621,0.07014028056112225,0.06913827655310621,0.07014028056112225,0.06913827655310621,0.07014028056112225,0.06913827655310621,0.07014028056112225,0.06913827655310621,0.07014028056112225,0.06913827655310621"},"ev":{}},"Text Area#0":{"t":"Text Area","lX":345,"lY":415,"sX":9.3,"sY":2.8,"s":"Restart Server","ps":{"enabled":"false","scalingType":"OK","width":"53.36%","height":"32.04%","x":"19.79%","y":"47.48%"},"ver":"190104c210519","dis":false,"tt":"","a":{},"ev":{"serverEvents":{"inputEvents":{"New Event #1":{"channel":"PESTCO/RODENTS/999040/UPLINKMSG","event":"feed","important":"false"}}}}},"companyTable":{"t":"Table","lX":2860,"lY":35,"sX":14.7,"sY":4.5,"s":"New Screen 1","ps":{"enabled":false,"scalingType":"OK","width":"97.8%","height":"54.95%","x":"192.28%","y":"4.27%"},"ver":"190104c210519","dis":false,"tt":"","a":{"text color":"#000000","row color":"#000000","columns":"id,name,status,address,phone,addressline1,email,postcode,country,state,city,longitude,latitude","display header":"true","title":"Companies","enable search":"true","colWidths":"0.07697547683923706,0.07697547683923706,0.07697547683923706,0.07697547683923706,0.07697547683923706,0.07697547683923706,0.07629427792915532,0.07697547683923706,0.07697547683923706,0.07697547683923706,0.07697547683923706,0.07697547683923706,0.07697547683923706"},"ev":{}}},"screens":{"New Screen 0":{"index":0,"icon":"widgets","meta":""},"New Screen 1":{"index":1,"icon":"widgets","meta":""},"Test Script":{"index":2,"icon":"widgets","meta":""},"Provisioning Test":{"index":3,"icon":"widgets","meta":""},"Restart Server":{"index":4,"icon":"widgets","meta":""}},"meta":""}